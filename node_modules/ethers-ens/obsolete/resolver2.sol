pragma solidity ^0.4.0;

contract AbstractENS {
    function owner(bytes32 nodeHash);
}

contract Resolver {
    bytes4 constant INTERFACE_ID_ADDR  = 0x3b3b57de;
    bytes4 constant INTERFACE_ID_URL   = 0xc659d443;
    bytes4 constant INTERFACE_ID_EMAIL = 0x373dea18;

    address constant ENS_ADDRESS = 0x314159265dd8dbb310642f98f50c066173c1259b;

    struct Record {
        address owner;
        address addr;
        string url;
        string email;
        //mapping (string => string) text;
        //string[] keys;
    }

    mapping (bytes32 => Record) _records;

    function supportsInterface(bytes4 interfaceId) constant returns (bool) {
        return (
            interfaceId == INTERFACE_ID_ADDR    ||
            interfaceId == INTERFACE_ID_EMAIL   ||
            interfaceId == INTERFACE_ID_URL
        );
    }

    function addr(bytes32 nodeHash) constant returns (address addr) {
        return _records[nodeHash].addr;
    }

    function setAddr(bytes32 nodeHash, address addr) return (address oldAddr) {
        if (msg.sender != AbstractEns(ENS_ADDRESS).owner(nodeHash)) { throw; }
        Record record = _records[nodeHash];
        address oldValue = record.addr;
        record.addr = addr;
        return oldAddr;
    }

    /*
    function text(bytes32 nodeHash) constant returns (string text) {
        return text(nodeHash, "");
    }

    function text(bytes32 nodeHash, string key) constant returns (string text) {
        return _record[nodeHash].text[key];
    }

    function setText(bytes32 nodeHash, string key, string value) returns (string oldText) {
        if (msg.sender != _ens.owner(nodeHash)) { throw; }
        Record record = _records[nodeHash];
        string oldValue = record.text[key];
        _text[key] = value;
        return oldValue;
    }

    function keyCount(bytes32 nodeHash) constant returns {
    }
    function keyAtIndex(bytes32 nodeHash)
    */

    function url(bytes32 nodeHash) constant returns (string url) {
        return _records[nodeHash].url;
    }

    function setUrl(bytes32 nodeHash, string url) {
        if (msg.sender != _ens.owner(nodeHash)) { throw; }
        Record record = _records[nodeHash];
        if (record.owner == address(0)) { throw; }
        record.addr = addr;
        _urls[nodeHash] = url;
    }

    function email(bytes32 nodeHash) constant returns (string email) {
        return _records[nodeHash].email;
    }

    function setEmail(bytes32 nodeHash, string email) {
        if (msg.sender != _ens.owner(nodeHash)) { throw; }
        Record record = _records[nodeHash];
        if (record.owner == address(0)) { throw; }
        record.email = email;
    }
}
