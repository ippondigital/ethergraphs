pragma solidity ^0.4.0;

contract AbstractEns {
    function owner(bytes32 nodeHash);
}

contract Resolver {
    bytes4 constant INTERFACE_ID_ADDR  = 0x3b3b57de;
    bytes4 constant INTERFACE_ID_URL   = 0xc659d443;
    bytes4 constant INTERFACE_ID_EMAIL = 0x373dea18;

    address constant ENS_ADDRESS = 0x314159265dd8dbb310642f98f50c066173c1259b;

    struct Record {
        address admin;
        address addr;
        string url;
        string email;
        mapping (string => string) text;
    }

    mapping (bytes32 => Record) _records;

    function supportsInterface(bytes4 interfaceId) constant returns (bool) {
        return (
            interfaceId == INTERFACE_ID_ADDR    ||
            interfaceId == INTERFACE_ID_EMAIL   ||
            interfaceId == INTERFACE_ID_URL
        );
    }

    function admin(bytes32 nodeHash) constant returns (address admin) {
        return _records[nodeHash].admin;
    }

    function setAdmin(bytes32 nodeHash, address admin) {
        if (msg.sender != AbstractEns(ENS_ADDRESS).owner(nodeHash)) { throw; }
        _records[nodeHash].admin = admin;
    }

    function addr(bytes32 nodeHash) constant returns (address addr) {
        return _records[nodeHash].addr;
    }

    function setAddr(bytes32 nodeHash, address addr) return (address oldAddr) {
        Record record = _records[nodeHash];
        if (msg.sender != record.admin) { throw; }
        oldAddr = record.addr;
        record.addr = addr;
    }

    function url(bytes32 nodeHash) constant returns (string url) {
        return _records[nodeHash].url;
    }

    function setUrl(bytes32 nodeHash, string url) returns (string oldUrl) {
        if (msg.sender != AbstractEns(ENS_ADDRESS).owner(nodeHash)) { throw; }
        Record record = _records[nodeHash];
        string oldValue = record.url;
        record.url = url;
        return oldValue;
    }

    function email(bytes32 nodeHash) constant returns (string email) {
        return _records[nodeHash].email;
    }

    function setEmail(bytes32 nodeHash, string email) returns (string oldUrl) {
        if (msg.sender != AbstractEns(ENS_ADDRESS).owner(nodeHash)) { throw; }
        Record record = _records[nodeHash];
        string oldValue = record.email;
        record.email = email;
        return oldValue;
    }

    // If a name is no longer owned by anyone, let its records be deleted
    function purge(bytes32 nodeHash) {
        if (address(0) != AbstractEns(ENS_ADDRESS).owner(nodeHash)) { throw; }
        delete _records[nodeHash];
    }
}
