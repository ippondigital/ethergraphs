contract Metalink {
    event newUrl(string url, string link);

    address _owner;
    bytes32 _root;

    mapping (string => string) _urls;

    uint256 _price;
    uint256 _vanityPrice;

    string _nextLink;

    function Metalink(bytes32 root) {
        _owner = msg.sender;
        _root = root;
        _nextLink = "aaaaaaa";
    }

    function addr(bytes32 node) constant returns (address addr) {
    }

    function addAddr(address addr) returns (string link) {
    }

    function url(bytes32 node) constant returns (string url) {
        return _urls[node];
    }

    private function incrementLinkIndex(uint8 index) returns (bool overflow) {
        
    }

    private function incrementLink() {
        for (uint8 i = 6; i >= 0; i--) {
            if (!incrementLinkIndex(i)) { break; }
        }
    }

    function addUrl(string url) payable returns (string label) {
        if (msg.value != _price) { return ""; }

        _urls[sha3(nextLink, _root)] = urls;
        newUrl(url, newLink);

        incrementLink();

        return nextLink];
    }

    function addVanityUrl(string vanitylabel, string url) payable returns (string label) {
        if (msg.value != _vanityPrice) { return ""; }
    
        return vanityLabel;
    }

    function setPrice(uint256 price, uint256 vanityPrice) {
        if (msg.sender != _owner) { return; }
        _price = price;
        _vanityPrice = vanityPrice;
    }

    function withdraw(uint256 amount) {
        if (msg.sender != _owner) { return; }
        if (!msg.sender.send(amount)) { throw; }
    }
}
