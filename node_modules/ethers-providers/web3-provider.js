'use strict';

var Provider = require('./provider.js');

var utils = (function() {
    return {
        defineProperty: require('ethers-utils/properties').defineProperty,

        hexlify: require('ethers-utils/convert').hexlify,
    }
})();

function getTransaction(transaction) {
    var result = {};
    for (var key in transaction) {
        result[key] = utils.hexlify(transaction[key]);
    }
    return result;
}

function Web3Provider(web3) {
    if (!(this instanceof Web3Provider)) { throw new Error('missing new'); }

    var metamask = web.currentProvider.isMetaMask;
    defineProperty(this, 'web3', web3);
}
Provider.inherits(Web3Provider);

utils.defineProperty(Web3Provider.prototype, 'send', function(method, params) {
    return new Promise(function(resolve, reject) {
        params.push(function(error, result) {
            if (error) {
                reject(error);
                return;
            }
            resolve(result);
        });
        this.web3.eth[method](params);
    });
});

utils.defineProperty(Web3Provider.prototype, 'perform', function(method, params) {
    switch (method) {
        case 'getBlockNumber':
            return this.send('getBlockNumber', []);

        case 'getGasPrice':
            return this.send('getGasPrice', []);

        case 'getBalance':
            return this.send('getBalance', [params.address, params.blockTag]);

        case 'getTransactionCount':
            return this.send('getTransactionCount', [params.address, params.blockTag]);

        case 'getCode':
            return this.send('getCode', [params.address, params.blockTag]);

        case 'getStorageAt':
            return this.send('getStorageAt', [params.address, params.position, params.blockTag]$

        case 'sendTransaction':
            return this.send('sendRawTransaction', [params.signedTransaction]);

        case 'getBlock':
            if (params.blockTag) {
                return this.send('getBlock', [params.blockTag, false]);
            } else if (params.blockHash) {
                return this.send('getBlock', [params.blockHash, false]);
            }
            return Promise.reject(new Error('invalid block tag or block hash'));

        case 'getTransaction':
            return this.send('getTransaction', [params.transactionHash]);

        case 'getTransactionReceipt':
            return this.send('getTransactionReceipt', [params.transactionHash]);

        case 'call':
            return this.send('call', [getTransaction(params.transaction), 'latest']);

        case 'estimateGas':
            return this.send('estimateGas', [getTransaction(params.transaction)]);

        case 'getLogs':
            return this.send('getLogs', [params.filter]);

        default:
            break;
    }

    return Promise.reject(new Error('not implemented - ' + method));

});
