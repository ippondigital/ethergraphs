#!/usr/bin/env node

'use strict';

var crypto = require('crypto');
var fs = require('fs');
var http = require('http');
var path = require('path');
var urlParse = require('url').parse;

var ethers = require('ethers');
var readlineSync = require('readline-sync');


var api = require('../lib/api.js');
var Git = require('../lib/git.js');
var Slug = require('../index.js').Slug;
var utils = require('../lib/utils.js');
var version = require('../package.json').version;
var WebServer = require('../lib/webserver');


// The command being run (eg. init)
var command = '';

// The account JSON wallet
var jsonAccount = null;

// The unlocked account
var account = null;


function getPassword(message) {
    if (!message) { message = 'Account Password: '; }
    var password = readlineSync.question(message, {hideEchoBack: true});
    password = password.normalize('NFKC');
    return new Buffer(password);
}

function getAccount() {
    var password = getPassword();
    return ethers.Wallet.fromEncryptedWallet(jsonAccount, password);
}

function showHelp(error) {
    console.log('');
    console.log('Command Line Interface - ethers/' + version);
    console.log('');
    console.log('Usage:');
    console.log('    ethers init');
    console.log('    ethers status [--head] [--slug SLUG1] [--slug SLUG2] [--published]');
    console.log('    ethers diff [--head] [--slug SLUG1] [--slug SLUG2] [--published]');
    console.log('    ethers prepare [--signed]');
    console.log('    ethers serve [--slug SLUG] [--port PORT] [--testnet] [--rpc URL]');
    console.log('    ethers push --slug SLUG');
    //console.log('');
    //console.log('    ethers dump-template');
    //console.log('    ethers lookup ALIAS [--testnet]');
    //console.log('    ethers search KEYWORD [--testnet]');
    //console.log('');
    //console.log('    ethers register ALIAS [--amount ETHER] [--wait] [--testnet] **');
    //console.log('    ethers update ALIAS [URL] [--wait] [--testnet] **');
    //console.log('    ethers keyword ( ALIAS KEYWORD | KWID ) [--amount ETHER] [--wait] [--testnet] **');
    //console.log('    ethers prune KWID [--wait] [--testnet] **');
    console.log('');

    console.log('    Options:');
    //console.log('        --password-file   no password prompt; read from file **');
    console.log('        --help            show this help screen');
    console.log('        --version         show the software version');
    console.log('        --testnet         use the morden testnet');
    console.log('');

    console.log('    Commands:');
    console.log('        init       creates a new account.json');
    console.log('        status     show status of package');
    console.log('        prepare    create a pre-packaged slug');
    console.log('        serve      locally host the app and browser');
    console.log('        push       deploys a slug to ethers.space');

//    console.log('        link       update the link in the Alias Registry');
//    console.log('        keyword    add a keyword to the Alias Registry');
//    console.log('        lookup     show the current URL for an Alias');
//    console.log('        search     show the current Aliases for a keyword');
//    console.log('        prune      remove an expired keyword from the keywords');
//    console.log('        renew      extend the expiration of an Alias');
//    console.log('');
//    console.log('** Note: These commands require funds (i.e. ether) to execute as');
//    console.log('         they update the Ethereum blockchain state.');
    console.log('');

    if (error.message !== '') {
        console.log(error.message);
        console.log('');
        process.exit(1);
    }

    process.exit();
}
/*
function gitStatus() {
    var git = new Git('.');

    return new Promise(function(resolve, reject) {
        git.status().then(function(result) {
            var status = {};
            for (var type in result) {
                result[type].forEach(function(filename) {
                    status[filename] = type;
                });
            }
            resolve(status);
        }, function(error) {
            reject(error);
        });
    });
}

function gitDiff(a, b, path) {
    return new Promise(function(resolve, reject) {
        if (path) { GitRunner.baseDir = path; }
        console.log('git diff ' + a + ' ' + b);
        GitRunner.execute(['git', 'diff', a, b], function(result) {
            resolve(result);
        });
    });
}
*/

// Validate all the command line options
try {

    // Parse the arguments (with these as the defaults)
    var opts = utils.getopts({
        port: 8080,
        slug: [],
        rpc: '',
    }, {
        head: false,
        help: false,
        open: false,
        published: false,
        testnet: false,
        signed: false,
        version: false,
    });

    if (opts.flags.help) { throw new Error(''); }

    if (opts.flags.version) {
        console.log('ethers/' + version);
        process.exit();
    }

    if (opts.args.length === 0) { throw new Error('No command specified.'); }
    command = opts.args.shift();

    function ensureArgCount(count) {
        if (opts.args.length !== count) {
            throw new Error('ethers ' + command + ': invalid arguments "' + opts.args.join('", "') + '"');
        }
    }

    // Load any existing account JSON
    try {
        jsonAccount = fs.readFileSync('./account.json');
        if (!ethers.Wallet.isValidWallet(jsonAccount)) {
            console.log('WARNING: invalid account.json format');
        }
    } catch (error) { }

    // Various checks for the command
    switch (command) {

        case 'init':
            ensureArgCount(0);
            break;

        case 'dump-template':
            ensureArgCount(0);
            break;

        case 'status':
            ensureArgCount(0);
            if (opts.options.published && !jsonAccount) {
                throw new Error('ethers status: --published requires an account (use ethers init)');
            }
            (function() {
                var count = opts.options.slug.length;
                if (opts.options.head) { count++; }
                if (opts.options.published) { count++; }
                if (count > 2) {
                    throw new Error('ethers status: too many sources');
                }
                if (count === 0 && !jsonAccount) {
                    throw new Error('ethers status: implicit --published requires an account (use ethers init)');
                }
            })();
            opts.ensureFile('slug');
            break;

        case 'prepare':
            ensureArgCount(0);
            break;

        case 'push':
            ensureArgCount(0);
            if (opts.options.slug.length !== 1) {
                throw new Error('ethers push: requires exactly one --slug');
            }
            opts.ensureFile('slug');
            break;

        case 'serve':
            ensureArgCount(0);
            opts.ensureInteger('port');
            if (opts.options.slug.length > 1) {
                throw new Error('ethers serve: may only specifiy --slug once');
            } else if (opts.options.slug.length) {
                opts.ensureFile('slug');
            }
            break;

        case 'debug-dump':
            if (opts.options.slug.length !== 1) {
                throw new Error('ethers debug-dump: requires exactly one --slug');
            }
            opts.ensureFile('slug');
            break;

        case 'diff':
            if (opts.options.published && !jsonAccount) {
                throw new Error('ethers diff: --published requires an account (use ethers init)');
            }
            (function() {
                var count = opts.options.slug.length;
                if (opts.options.head) { count++; }
                if (opts.options.published) { count++; }
                if (count > 2) {
                    throw new Error('ethers diff: too many sources');
                }
                if (count === 0 && !jsonAccount) {
                    throw new Error('ethers diff: implicit --published requires an account (use ethers init)');
                }
            })();
            opts.ensureFile('slug');
            break;

        default:
            throw new Error('Unknown command: ethers ' + command);
    }

    var allowedOptions = {
        prepare: {signed: true},
        diff: {head: true, slug: true, published: true},
        serve: {open: true, port: true, rpc: true, slug: true, testnet: true},
        push: {slug: true},
    };

    if (allowedOptions[command]) {
        opts.explicit.forEach(function(option) {
            if (!allowedOptions[command][option.substring(2)]) {
                throw new Error('Invalid option for ' + command + ': ' + option + '');
            }
        });
    }

} catch (error) {
    showHelp(error);
}

function getSources(filenamesForStaging) {
    var git = new Git('.');

    function Source(name, versions) {
        this.name = name;
        this.versions = versions;
    }

    function getHashes(filenames) {
        return new Promise(function(resolve, reject) {
            var versions = {};
            Object.defineProperty(versions, '_useFilename', {
                enumerable: false,
                value: true
            });

            var getHashes = [];
            filenames.forEach(function(filename) {
                getHashes.push(new Promise(function(resolve, reject) {
                    fs.readFile(filename, function(error, data) {
                        if (error) {
                            reject(error);
                            return;
                        }
                        versions[filename] = utils.getGitHash(data);
                        resolve();
                    });
                }));
            });

            Promise.all(getHashes).then(function() {
                resolve(versions);
            }, function(error) {
                reject(error);
            });
        });
    }

    function getStaging() {
        return Promise.all([
            git.status(),
            git.listTree(),
        ]).then(function(result) {
            var status = result[0];
            var listTree = Object.keys(result[1]);

            var versions = {};
            (status.notAdded || []).forEach(function(filename) {
                versions[filename] = null;
            });

            var filenames = {};
            listTree.forEach(function(filename) {
                filenames[filename] = true;
            });
            ['created', 'deleted', 'modified'].forEach(function(tag) {
                (status[tag] || []).forEach(function(filename) {
                    filenames[filename] = true;
                });
            });
            filenames = Object.keys(filenames);

            return getHashes(filenames).then(function(result) {
                for (var key in result) {
                    versions[key] = result[key];
                }
                return new Source('staging', versions);
            });
        });
    }

    function getSlugVersions(slugJSON) {
        try {
            var slug = Slug.load(slugJSON);
            var versions = {};
            slug.filenames.forEach(function(filename) {
                versions[filename] = slug.getGitHash(filename);
            });
            return Promise.resolve(new Source('slug', versions));
        } catch (error) {
            return Promise.reject(error);
        }
    }

    function publishedVersions(address) {
        return api.getSlugVersions(address).then(function(versions) {
            return new Source('published', versions);
        });
    }

    var sources = [];

    opts.options.slug.forEach(function(slugJSON) {
        sources.push(getSlugVersions(slugJSON));
    });

    if (opts.flags.head) {
        var getHead = git.listTree().then(function(versions) {
            return new Source('head', versions);
        });
        sources.push(getHead);
    }

    if (jsonAccount) {
        var address = JSON.parse(jsonAccount).address;

        if (sources.length === 0) {
            sources.push(publishedVersions(address));
            sources.push(getStaging());
        } else if (opts.flags.published) {
            sources.unshift(publishedVersions(address));
        }
    }

    if (sources.length === 0) {
        return Promise.reject(new Error('shold not get here'));

    } else if (sources.length === 1) {
        sources.push(getStaging());
    }

    return Promise.all(sources);
}

switch (command) {

    case 'status':
        (function() {
            if (jsonAccount) {
                var address = JSON.parse(jsonAccount).address;

                console.log('Address: ' + address);
                console.log('URL:     https://' + address.toLowerCase() + '.ethers.space');

            } else {
                console.log('No ethers.space account found (Use `ethers init`)');
            }

            getSources().then(function(sources) {
                var allFilenames = {};
                sources.forEach(function(source) {
                    for (var filename in source.versions) {
                        allFilenames[filename] = true;
                    }
                });
                allFilenames = Object.keys(allFilenames);
                allFilenames.sort();

                var changes = [];
                var untracked = [];

                allFilenames.forEach(function(filename) {
                    var hashFrom = sources[0].versions[filename];
                    var hashTo = sources[1].versions[filename];

                    if (!hashFrom && !hashTo) {
                        untracked.push(filename);

                    } else if (!hashFrom && hashTo) {
                        changes.push({filename: filename, action: 'added      '});

                    } else if (hashFrom && !hashTo) {
                        changes.push({filename: filename, action: 'removed:   '});

                    } else if (hashFrom !== hashTo) {
                        changes.push({filename: filename, action: 'modified:  '});
                    }
                });

                if (changes.length) {
                    console.log('File Status:');
                    changes.forEach(function(change) {
                    console.log('    ' + change.action + change.filename);
                    });
                } else {
                    console.log('No files changed.');
                }

                if (untracked.length) {
                    console.log('Untracked Files:');
                    untracked.forEach(function(filename) {
                        console.log('    ' + filename);
                    });
                }

            }).catch(function(error) {
                console.log(error);
            });
        })();
        break;

    case 'init':
        (function() {
            if (jsonAccount) {
                console.log('Cannot `init`. Account already exists (account.json).');
                process.exit(1);
                return;
            }

            // Generate a new private key
            var privateKey = '0x' + crypto.randomBytes(32).toString('hex');
            var wallet = new ethers.Wallet(privateKey);

            // Get a password from the user
            console.log('Do NOT lose or forget this password. It cannot be reset.');
            var password = getPassword('New Account Password: ');
            var confirmPassword = getPassword('Confirm Password: ');
            if (Buffer.compare(password, confirmPassword) !== 0) {
                console.log('Passwords did NOT match. Aborting.');
                return;
            }

            // Encrypt the account and save it to disk
            console.log('Encrypting Account... (this may take a few seconds)');
            wallet.encrypt(password).then(function(json) {
                try {
                    fs.writeFileSync('account.json', json, {flag: 'wx'});
                    console.log('Account successfully created. Keep this file SAFE. Do NOT check it into source control.');
                } catch (error) {
                    console.log('Error saving account.js: ' + error.message);
                }
            }, function(error) {
                console.log('Error encrypting account: ' + error.message);
            });

        })();
        break;

    case 'dump-template':
        (function() {
            var template = fs.readFileSync(path.join(__dirname, '../static/template.html')).toString();
            console.log(template);
        })();
        break;

    case 'serve':
        (function() {

            var ethersHtml = fs.readFileSync(path.join(__dirname, '../static/index.html')).toString();

            var handler = null;
            if (opts.options.slug.length) {
                handler = (function() {
                    var slug = Slug.verify(opts.options.slug[0]);
                    console.log('Serving content from slug://' + slug.address);

                    return function(path) {
                        path = path.substring(1);
                        var data = slug.getData(path);
                        return new Promise(function(resolve, reject) {
                            if (data) {
                                resolve({
                                    path: 'slug://' + path,
                                    body: data
                                });
                            } else {
                               reject(WebServer.makeError(404, 'Not Found'));
                            }
                        });
                    }
                })();

            } else {
                handler = WebServer.staticFileHandler();
            }

            var webServer = new WebServer(handler, {port: opts.options.port});

            if (opts.options.rpc) {
                ethersHtml = ethersHtml.replace(/<ETHERS_NETWORK>/g, opts.options.rpc)
            } else if (opts.flags.testnet) {
                ethersHtml = ethersHtml.replace(/<ETHERS_NETWORK>/g, 'testnet')
            } else {
                ethersHtml = ethersHtml.replace(/<ETHERS_NETWORK>/g, 'mainnet')
            }

            webServer.addOverride('/account.json', WebServer.makeError(403, 'Forbidden'));
            webServer.addOverride('/test', 'foo');
            webServer.addOverride('/_/index.html', ethersHtml);

            webServer.start(function() {
                var url = 'http://localhost:' + webServer.port + '/_/#!/app-link-insecure/localhost:' + webServer.port + '/';
                console.log('Listening on port: ' + webServer.port);
                console.log('Server Ethers app: ' + url);
            });
        })();
        break;

    case 'prepare':
        (function() {
            if (opts.flags.signed) {
                getAccount().then(function(wallet) {
                    Slug.generate().then(function(slug) {
                        var payload = slug.sign(wallet.privateKey);
                        fs.writeFileSync(wallet.address + '.slug', payload);
                    }, function(error) {
                        console.log('Error preparing slug: ' + error.message);
                    });

                }, function(error) {
                    if (error.message === 'invalid password') {
                        console.log('Error: Invalid password');
                    } else {
                        console.log('Error decrypting account: ' + error.message);
                    }
                });
            } else {
                Slug.generate().then(function(slug) {
                    var payload = slug.unsigned();
                    fs.writeFileSync('unsigned.slug', payload);
                }, function(error) {
                    console.log('Error preparing slug: ' + error.message);
                });
            }
        })();
        break;

    case 'diff':
        // diff => diff between published:hash filename
        // diff --slug SLUG => diff between slug:hash filename
        // diff --slug SLUG --published => diff between published:hash slug:filename
        // diff --slug SLUG --slug SLUG => diff between slug:hash slug:filename
        (function() {
            var git = new Git('.');

            getSources(true).then(function(sources) {

                var allFilenames = {};
                sources.forEach(function(source) {
                    for (var filename in source.versions) {
                        allFilenames[filename] = true;
                    }
                });
                allFilenames = Object.keys(allFilenames);
                allFilenames.sort();

                allFilenames.forEach(function(filename) {
                    var hashFrom = sources[0].versions[filename];
                    var hashTo = sources[1].versions[filename];
                    if (!hashFrom && !hashTo) {

                    } else if (!hashFrom && hashTo) {
                        console.log('Added: ' + filename);

                    } else if (hashFrom && !hashTo) {
                        console.log('Removed: ' + filename);

                    } else if (hashFrom !== hashTo) {
                        if (sources[1].name === 'staging') {
                            hashTo = filename;
                        }

                        git.diff(hashFrom, hashTo).then(function(result) {
                            console.log(result);
                        });
                    }
                });
            });
        })();
        break;

    case 'push':
        (function() {
            if (!jsonAccount) {
                console.log('Command `push` requires an account (use `ethers init` first.)');
                process.exit(1);
            }

            var slugJSON = opts.options.slug[0].toString();
            var slug = Slug.load(slugJSON);

            if (slug.signed) {
                api.putSlug('unused', slugJSON).then(function() {
                    console.log('Successfully deployed!');
                }, function(error) {
                    console.log(error);
                });

            } else {
                getAccount().then(function(wallet) {
                    var signedSlug = slug.sign(wallet.privateKey);
                    api.putSlug('unused', signedSlug).then(function() {
                        console.log('Successfully deployed!');
                    }, function(error) {
                        console.log(error);
                    });;

                }, function(error) {
                    if (error.message === 'invalid password') {
                        console.log('Error: Invalid password');
                    } else {
                        console.log('Error decrypting account: ' + error.message);
                    }
                });
            }
        })();
        break;

    case 'debug-dump':
        (function() {
            var slug = Slug.verify(opts.options.slug[0]);
            slug.filenames.forEach(function(filename) {
                console.log(filename + '\n    length:  ' + slug.getData(filename).length + ' bytes\n    sha256:  ' + slug.getHash(filename) + '\n    gitSha1: ' + slug.getGitHash(filename));
            });
        })();
        break;
}
/**
 *
 *  ethers init
 *  ethers [--testnet] status (shows address)
 *  ethers [--testnet] register ALIAS
 *  ethers [--testnet] extend ALIAS
 *
 *  ethers init (creates new account.json)
 *  ethers push ALIAS
 *
 *  Future:
 *      ethers pull ALIAS
 *
 */
